/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { HappyBag, HappyBagInterface } from "../HappyBag";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "bagId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "claimer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "BagClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "bagId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isEqual",
        type: "bool",
      },
    ],
    name: "BagCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "bagHistory",
    outputs: [
      {
        internalType: "uint256",
        name: "totalAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "remainingCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "remainingAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "isEqual",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "claimedInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "currentBagId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isEqual",
        type: "bool",
      },
    ],
    name: "initBag",
    outputs: [],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bagId",
        type: "uint256",
      },
    ],
    name: "getBagInfo",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "totalAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "remainingCount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "remainingAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "startTime",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "creator",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isEqual",
            type: "bool",
          },
        ],
        internalType: "struct HappyBag.BagInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "bagId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getUserClaimedAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "getCurrentBagId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506115d2806100206000396000f3fe608060405260043610610098576000357c01000000000000000000000000000000000000000000000000000000009004806383beafb81161006b57806383beafb81461014a578063ac73df5514610187578063bb45b3d6146101b2578063df852d35146101dd57610098565b806305bc45e21461009d57806333f47f77146100da5780634ab27003146100f65780634e71d92d14610133575b600080fd5b3480156100a957600080fd5b506100c460048036038101906100bf9190610d39565b610221565b6040516100d19190610d88565b60405180910390f35b6100f460048036038101906100ef9190610ddb565b610246565b005b34801561010257600080fd5b5061011d60048036038101906101189190610d39565b610486565b60405161012a9190610d88565b60405180910390f35b34801561013f57600080fd5b506101486104e0565b005b34801561015657600080fd5b50610171600480360381019061016c9190610e1b565b6109fa565b60405161017e9190610f17565b60405180910390f35b34801561019357600080fd5b5061019c610ae6565b6040516101a99190610d88565b60405180910390f35b3480156101be57600080fd5b506101c7610aec565b6040516101d49190610d88565b60405180910390f35b3480156101e957600080fd5b5061020460048036038101906101ff9190610e1b565b610af6565b604051610218989796959493929190610f51565b60405180910390f35b6000602052816000526040600020602052806000526040600020600091509150505481565b60008211610289576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102809061102c565b60405180910390fd5b6000600254146102fa5760016000600254815260200190815260200160002060050160149054906101000a900460ff16156102f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f090611098565b60405180910390fd5b5b610302610b78565b6002819055506040518061010001604052803481526020018381526020018381526020013481526020014281526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600115158152602001821515815250600160006002548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160050160146101000a81548160ff02191690831515021790555060e08201518160050160156101000a81548160ff0219169083151502179055509050503373ffffffffffffffffffffffffffffffffffffffff166002547e934ef34e154045a5b8558922648a4d0a831a60a75c93bef251f0440de7f80a34858560405161047a939291906110b8565b60405180910390a35050565b600080600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600060025403610525576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051c9061113b565b60405180910390fd5b60016000600254815260200190815260200160002060050160149054906101000a900460ff1661058a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610581906111a7565b60405180910390fd5b6000806000600254815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461061e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061590611213565b60405180910390fd5b60006001600060025481526020019081526020016000206002015411610679576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106709061127f565b60405180910390fd5b60006001806000600254815260200190815260200160002060020154036106ba5760016000600254815260200190815260200160002060030154905061085a565b60016000600254815260200190815260200160002060050160159054906101000a900460ff161561072857600160006002548152602001908152602001600020600101546001600060025481526020019081526020016000206000015461072191906112fd565b9050610859565b6000600160006002548152602001908152602001600020600201546001600060025481526020019081526020016000206003015461076691906112fd565b90506000600282610777919061132e565b9050600160006002548152602001908152602001600020600301548111156107b5576001600060025481526020019081526020016000206003015490505b6000424433600160006002548152602001908152602001600020600201546002546040516020016107ea9594939291906113e5565b604051602081830303815290604052805190602001206001900490506000600a8461081591906112fd565b90506000810361082457600190505b600181846108329190611444565b61083c9190611478565b8261084791906114ac565b816108529190611478565b9450505050505b5b80600080600254815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060016000600254815260200190815260200160002060020160008154809291906108d9906114dd565b91905055508060016000600254815260200190815260200160002060030160008282546109069190611444565b925050819055506000600160006002548152602001908152602001600020600201540361095f57600060016000600254815260200190815260200160002060050160146101000a81548160ff0219169083151502179055505b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156109a5573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff166002547fc9f20967f9586ff57debada4e8e617236f1de0f0dee8002c9afb9d14e6b112e0836040516109ef9190610d88565b60405180910390a350565b610a02610c41565b600160008381526020019081526020016000206040518061010001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a900460ff161515151581526020016005820160159054906101000a900460ff1615151515815250509050919050565b60025481565b6000600254905090565b60016020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160149054906101000a900460ff16908060050160159054906101000a900460ff16905088565b600060036000815480929190610b8d90611506565b91905055506000423360035444604051602001610bad949392919061154e565b604051602081830303815290604052805190602001206001900490505b6000600160008381526020019081526020016000206004015414610c3a5760036000815480929190610bfb90611506565b9190505550423360035444604051602001610c19949392919061154e565b60405160208183030381529060405280519060200120600190049050610bca565b8091505090565b6040518061010001604052806000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020016000151581525090565b600080fd5b6000819050919050565b610cb881610ca5565b8114610cc357600080fd5b50565b600081359050610cd581610caf565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d0682610cdb565b9050919050565b610d1681610cfb565b8114610d2157600080fd5b50565b600081359050610d3381610d0d565b92915050565b60008060408385031215610d5057610d4f610ca0565b5b6000610d5e85828601610cc6565b9250506020610d6f85828601610d24565b9150509250929050565b610d8281610ca5565b82525050565b6000602082019050610d9d6000830184610d79565b92915050565b60008115159050919050565b610db881610da3565b8114610dc357600080fd5b50565b600081359050610dd581610daf565b92915050565b60008060408385031215610df257610df1610ca0565b5b6000610e0085828601610cc6565b9250506020610e1185828601610dc6565b9150509250929050565b600060208284031215610e3157610e30610ca0565b5b6000610e3f84828501610cc6565b91505092915050565b610e5181610ca5565b82525050565b610e6081610cfb565b82525050565b610e6f81610da3565b82525050565b61010082016000820151610e8c6000850182610e48565b506020820151610e9f6020850182610e48565b506040820151610eb26040850182610e48565b506060820151610ec56060850182610e48565b506080820151610ed86080850182610e48565b5060a0820151610eeb60a0850182610e57565b5060c0820151610efe60c0850182610e66565b5060e0820151610f1160e0850182610e66565b50505050565b600061010082019050610f2d6000830184610e75565b92915050565b610f3c81610cfb565b82525050565b610f4b81610da3565b82525050565b600061010082019050610f67600083018b610d79565b610f74602083018a610d79565b610f816040830189610d79565b610f8e6060830188610d79565b610f9b6080830187610d79565b610fa860a0830186610f33565b610fb560c0830185610f42565b610fc260e0830184610f42565b9998505050505050505050565b600082825260208201905092915050565b7f496e76616c696420636f756e74206e756d626572206f66206261677320210000600082015250565b6000611016601e83610fcf565b915061102182610fe0565b602082019050919050565b6000602082019050818103600083015261104581611009565b9050919050565b7f4c61737420626167206973207374696c6c206163746976650000000000000000600082015250565b6000611082601883610fcf565b915061108d8261104c565b602082019050919050565b600060208201905081810360008301526110b181611075565b9050919050565b60006060820190506110cd6000830186610d79565b6110da6020830185610d79565b6110e76040830184610f42565b949350505050565b7f4e6f2062616720617661696c61626c6500000000000000000000000000000000600082015250565b6000611125601083610fcf565b9150611130826110ef565b602082019050919050565b6000602082019050818103600083015261115481611118565b9050919050565b7f4e6f206163746976652062616700000000000000000000000000000000000000600082015250565b6000611191600d83610fcf565b915061119c8261115b565b602082019050919050565b600060208201905081810360008301526111c081611184565b9050919050565b7f416c726561647920636c61696d65642100000000000000000000000000000000600082015250565b60006111fd601083610fcf565b9150611208826111c7565b602082019050919050565b6000602082019050818103600083015261122c816111f0565b9050919050565b7f4e6f2062616773206c6566742100000000000000000000000000000000000000600082015250565b6000611269600d83610fcf565b915061127482611233565b602082019050919050565b600060208201905081810360008301526112988161125c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061130882610ca5565b915061131383610ca5565b9250826113235761132261129f565b5b828204905092915050565b600061133982610ca5565b915061134483610ca5565b925082820261135281610ca5565b91508282048414831517611369576113686112ce565b5b5092915050565b6000819050919050565b61138b61138682610ca5565b611370565b82525050565b60006c0100000000000000000000000082029050919050565b60006113b582611391565b9050919050565b60006113c7826113aa565b9050919050565b6113df6113da82610cfb565b6113bc565b82525050565b60006113f1828861137a565b602082019150611401828761137a565b60208201915061141182866113ce565b601482019150611421828561137a565b602082019150611431828461137a565b6020820191508190509695505050505050565b600061144f82610ca5565b915061145a83610ca5565b9250828203905081811115611472576114716112ce565b5b92915050565b600061148382610ca5565b915061148e83610ca5565b92508282019050808211156114a6576114a56112ce565b5b92915050565b60006114b782610ca5565b91506114c283610ca5565b9250826114d2576114d161129f565b5b828206905092915050565b60006114e882610ca5565b9150600082036114fb576114fa6112ce565b5b600182039050919050565b600061151182610ca5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611543576115426112ce565b5b600182019050919050565b600061155a828761137a565b60208201915061156a82866113ce565b60148201915061157a828561137a565b60208201915061158a828461137a565b6020820191508190509594505050505056fea264697066735822122031c05e499ab8994b217f142174fa939b3653b5366fa03cb16836b4f7aa576cb864736f6c63430008140033";

type HappyBagConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HappyBagConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HappyBag__factory extends ContractFactory {
  constructor(...args: HappyBagConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      HappyBag & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): HappyBag__factory {
    return super.connect(runner) as HappyBag__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HappyBagInterface {
    return new Interface(_abi) as HappyBagInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): HappyBag {
    return new Contract(address, _abi, runner) as unknown as HappyBag;
  }
}
