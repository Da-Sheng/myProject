/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface JJTicketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allHashes"
      | "buyerHashes"
      | "jjCoin"
      | "owner"
      | "soldTickets"
      | "ticketHashes"
      | "ticketPrice"
      | "totalTickets"
      | "addTicketHashes"
      | "purchaseTicket"
      | "purchaseRandomTicket"
      | "markHashAsUsed"
      | "getTicketInfo"
      | "getBuyerHashes"
      | "getAvailableTicketsCount"
      | "getAllHashes"
      | "verifyTicketHash"
      | "updateTicketPrice"
      | "updateTotalTickets"
      | "withdrawJJCoin"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "HashAdded"
      | "HashUsed"
      | "PriceUpdated"
      | "TicketPurchased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allHashes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyerHashes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "jjCoin", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "soldTickets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticketHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTickets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTicketHashes",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseTicket",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseRandomTicket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markHashAsUsed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyerHashes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableTicketsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllHashes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTicketHash",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTicketPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTotalTickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawJJCoin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "allHashes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyerHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jjCoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "soldTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTicketHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseRandomTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markHashAsUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyerHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableTicketsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyTicketHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTicketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTotalTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawJJCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace HashAddedEvent {
  export type InputTuple = [hashValue: BytesLike, timestamp: BigNumberish];
  export type OutputTuple = [hashValue: string, timestamp: bigint];
  export interface OutputObject {
    hashValue: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HashUsedEvent {
  export type InputTuple = [
    hashValue: BytesLike,
    buyer: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    hashValue: string,
    buyer: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    hashValue: string;
    buyer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [
    oldPrice: BigNumberish,
    newPrice: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    oldPrice: bigint,
    newPrice: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    oldPrice: bigint;
    newPrice: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketPurchasedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    ticketHash: BytesLike,
    price: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    ticketHash: string,
    price: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    buyer: string;
    ticketHash: string;
    price: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface JJTicket extends BaseContract {
  connect(runner?: ContractRunner | null): JJTicket;
  waitForDeployment(): Promise<this>;

  interface: JJTicketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allHashes: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  buyerHashes: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  jjCoin: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  soldTickets: TypedContractMethod<[], [bigint], "view">;

  ticketHashes: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, boolean, boolean] & {
        hashValue: string;
        buyer: string;
        purchaseTime: bigint;
        isUsed: boolean;
        exists: boolean;
      }
    ],
    "view"
  >;

  ticketPrice: TypedContractMethod<[], [bigint], "view">;

  totalTickets: TypedContractMethod<[], [bigint], "view">;

  addTicketHashes: TypedContractMethod<
    [_hashes: BytesLike[]],
    [void],
    "nonpayable"
  >;

  purchaseTicket: TypedContractMethod<
    [_desiredHash: BytesLike],
    [void],
    "nonpayable"
  >;

  purchaseRandomTicket: TypedContractMethod<[], [string], "nonpayable">;

  markHashAsUsed: TypedContractMethod<[_hash: BytesLike], [void], "nonpayable">;

  getTicketInfo: TypedContractMethod<
    [_hash: BytesLike],
    [
      [string, bigint, boolean, boolean] & {
        buyer: string;
        purchaseTime: bigint;
        isUsed: boolean;
        exists: boolean;
      }
    ],
    "view"
  >;

  getBuyerHashes: TypedContractMethod<
    [_buyer: AddressLike],
    [string[]],
    "view"
  >;

  getAvailableTicketsCount: TypedContractMethod<[], [bigint], "view">;

  getAllHashes: TypedContractMethod<[], [string[]], "view">;

  verifyTicketHash: TypedContractMethod<
    [_hash: BytesLike, _buyer: AddressLike],
    [boolean],
    "view"
  >;

  updateTicketPrice: TypedContractMethod<
    [_newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateTotalTickets: TypedContractMethod<
    [_newTotal: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawJJCoin: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allHashes"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "buyerHashes"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "jjCoin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "soldTickets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ticketHashes"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, boolean, boolean] & {
        hashValue: string;
        buyer: string;
        purchaseTime: bigint;
        isUsed: boolean;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "ticketPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalTickets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addTicketHashes"
  ): TypedContractMethod<[_hashes: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "purchaseTicket"
  ): TypedContractMethod<[_desiredHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "purchaseRandomTicket"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "markHashAsUsed"
  ): TypedContractMethod<[_hash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getTicketInfo"
  ): TypedContractMethod<
    [_hash: BytesLike],
    [
      [string, bigint, boolean, boolean] & {
        buyer: string;
        purchaseTime: bigint;
        isUsed: boolean;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBuyerHashes"
  ): TypedContractMethod<[_buyer: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAvailableTicketsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllHashes"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "verifyTicketHash"
  ): TypedContractMethod<
    [_hash: BytesLike, _buyer: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateTicketPrice"
  ): TypedContractMethod<[_newPrice: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTotalTickets"
  ): TypedContractMethod<[_newTotal: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawJJCoin"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "HashAdded"
  ): TypedContractEvent<
    HashAddedEvent.InputTuple,
    HashAddedEvent.OutputTuple,
    HashAddedEvent.OutputObject
  >;
  getEvent(
    key: "HashUsed"
  ): TypedContractEvent<
    HashUsedEvent.InputTuple,
    HashUsedEvent.OutputTuple,
    HashUsedEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TicketPurchased"
  ): TypedContractEvent<
    TicketPurchasedEvent.InputTuple,
    TicketPurchasedEvent.OutputTuple,
    TicketPurchasedEvent.OutputObject
  >;

  filters: {
    "HashAdded(bytes32,uint256)": TypedContractEvent<
      HashAddedEvent.InputTuple,
      HashAddedEvent.OutputTuple,
      HashAddedEvent.OutputObject
    >;
    HashAdded: TypedContractEvent<
      HashAddedEvent.InputTuple,
      HashAddedEvent.OutputTuple,
      HashAddedEvent.OutputObject
    >;

    "HashUsed(bytes32,address,uint256)": TypedContractEvent<
      HashUsedEvent.InputTuple,
      HashUsedEvent.OutputTuple,
      HashUsedEvent.OutputObject
    >;
    HashUsed: TypedContractEvent<
      HashUsedEvent.InputTuple,
      HashUsedEvent.OutputTuple,
      HashUsedEvent.OutputObject
    >;

    "PriceUpdated(uint256,uint256,uint256)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;

    "TicketPurchased(address,bytes32,uint256,uint256)": TypedContractEvent<
      TicketPurchasedEvent.InputTuple,
      TicketPurchasedEvent.OutputTuple,
      TicketPurchasedEvent.OutputObject
    >;
    TicketPurchased: TypedContractEvent<
      TicketPurchasedEvent.InputTuple,
      TicketPurchasedEvent.OutputTuple,
      TicketPurchasedEvent.OutputObject
    >;
  };
}
