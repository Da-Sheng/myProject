/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace HappyBag {
  export type BagInfoStruct = {
    totalAmount: BigNumberish;
    totalCount: BigNumberish;
    remainingCount: BigNumberish;
    remainingAmount: BigNumberish;
    startTime: BigNumberish;
    creator: AddressLike;
    isActive: boolean;
    isEqual: boolean;
  };

  export type BagInfoStructOutput = [
    totalAmount: bigint,
    totalCount: bigint,
    remainingCount: bigint,
    remainingAmount: bigint,
    startTime: bigint,
    creator: string,
    isActive: boolean,
    isEqual: boolean
  ] & {
    totalAmount: bigint;
    totalCount: bigint;
    remainingCount: bigint;
    remainingAmount: bigint;
    startTime: bigint;
    creator: string;
    isActive: boolean;
    isEqual: boolean;
  };
}

export interface HappyBagInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bagHistory"
      | "claimedInfo"
      | "currentBagId"
      | "initBag"
      | "claim"
      | "getBagInfo"
      | "getUserClaimedAmount"
      | "getCurrentBagId"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "BagClaimed" | "BagCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "bagHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentBagId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initBag",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBagInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserClaimedAmount",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBagId",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "bagHistory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimedInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentBagId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initBag", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBagInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserClaimedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBagId",
    data: BytesLike
  ): Result;
}

export namespace BagClaimedEvent {
  export type InputTuple = [
    bagId: BigNumberish,
    claimer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [bagId: bigint, claimer: string, amount: bigint];
  export interface OutputObject {
    bagId: bigint;
    claimer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BagCreatedEvent {
  export type InputTuple = [
    bagId: BigNumberish,
    creator: AddressLike,
    totalAmount: BigNumberish,
    count: BigNumberish,
    isEqual: boolean
  ];
  export type OutputTuple = [
    bagId: bigint,
    creator: string,
    totalAmount: bigint,
    count: bigint,
    isEqual: boolean
  ];
  export interface OutputObject {
    bagId: bigint;
    creator: string;
    totalAmount: bigint;
    count: bigint;
    isEqual: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HappyBag extends BaseContract {
  connect(runner?: ContractRunner | null): HappyBag;
  waitForDeployment(): Promise<this>;

  interface: HappyBagInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bagHistory: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, string, boolean, boolean] & {
        totalAmount: bigint;
        totalCount: bigint;
        remainingCount: bigint;
        remainingAmount: bigint;
        startTime: bigint;
        creator: string;
        isActive: boolean;
        isEqual: boolean;
      }
    ],
    "view"
  >;

  claimedInfo: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  currentBagId: TypedContractMethod<[], [bigint], "view">;

  initBag: TypedContractMethod<
    [count: BigNumberish, isEqual: boolean],
    [void],
    "payable"
  >;

  claim: TypedContractMethod<[], [void], "nonpayable">;

  getBagInfo: TypedContractMethod<
    [bagId: BigNumberish],
    [HappyBag.BagInfoStructOutput],
    "view"
  >;

  getUserClaimedAmount: TypedContractMethod<
    [bagId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;

  getCurrentBagId: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bagHistory"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, string, boolean, boolean] & {
        totalAmount: bigint;
        totalCount: bigint;
        remainingCount: bigint;
        remainingAmount: bigint;
        startTime: bigint;
        creator: string;
        isActive: boolean;
        isEqual: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimedInfo"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "currentBagId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initBag"
  ): TypedContractMethod<
    [count: BigNumberish, isEqual: boolean],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBagInfo"
  ): TypedContractMethod<
    [bagId: BigNumberish],
    [HappyBag.BagInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserClaimedAmount"
  ): TypedContractMethod<
    [bagId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentBagId"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "BagClaimed"
  ): TypedContractEvent<
    BagClaimedEvent.InputTuple,
    BagClaimedEvent.OutputTuple,
    BagClaimedEvent.OutputObject
  >;
  getEvent(
    key: "BagCreated"
  ): TypedContractEvent<
    BagCreatedEvent.InputTuple,
    BagCreatedEvent.OutputTuple,
    BagCreatedEvent.OutputObject
  >;

  filters: {
    "BagClaimed(uint256,address,uint256)": TypedContractEvent<
      BagClaimedEvent.InputTuple,
      BagClaimedEvent.OutputTuple,
      BagClaimedEvent.OutputObject
    >;
    BagClaimed: TypedContractEvent<
      BagClaimedEvent.InputTuple,
      BagClaimedEvent.OutputTuple,
      BagClaimedEvent.OutputObject
    >;

    "BagCreated(uint256,address,uint256,uint256,bool)": TypedContractEvent<
      BagCreatedEvent.InputTuple,
      BagCreatedEvent.OutputTuple,
      BagCreatedEvent.OutputObject
    >;
    BagCreated: TypedContractEvent<
      BagCreatedEvent.InputTuple,
      BagCreatedEvent.OutputTuple,
      BagCreatedEvent.OutputObject
    >;
  };
}
